/**
 * CSS Lock
 */
@function cssLock(
  $propValuesFrom: (),
  $propValuesTo: (),
  $sizeFrom: 0,
  $sizeTo: 0
) {
  $propValue: "";

  @if (length($propValuesFrom) != length($propValuesTo)) {
    @error "length of 'propValuesFrom' should be equal to length of 'propValuesTo'";
  }

  @for $i from 1 through length($propValuesFrom) {
    @if ((nth($propValuesFrom, $i) == 0) and nth($propValuesTo, $i) == 0) {
      $propValue: str-insert($propValue, "0", -1) + " ";
    } @else {
      $propValue:
        str-insert(
          $propValue,
          calc(
            #{nth($propValuesFrom, $i)}px +
            (#{nth($propValuesFrom, $i)} -
            #{nth($propValuesTo, $i)}) *
            (100vw - #{$sizeFrom}px) /
            (#{$sizeFrom} - #{$sizeTo})
          ),
          -1
        ) + " ";
    }
  }

  @return unquote($propValue);
}

/**
 * generates css property for specified values
 * usage:
	:root {
    @include responsiveProperty($propName: "--fz54", $breakpoints: (1900: 54, 1100: 45, 768: 35, 350: 20));
	}
	.your-class {
    font-size: var(--fz54);
	}
  OR:
  .your-class {
    @include responsiveProperty($propName: "font-size", $breakpoints: (1900: 54, 1100: 45, 768: 35, 350: 20));
	}
 * @param  {sass array} $breakPoints: () map list of breakpoints
 * @param  {string} $propName: () name of css property
 * @return {css property} property for each breakpoint
 */
@mixin responsiveProperty(
  $propName: null,
  $breakpoints: ()
) {
  $screenSizes: map-keys($breakpoints);
  $propValues: map-values($breakpoints);

  // get map length
  $breakpointsLength: length($screenSizes);

  @if ($propName == null) {
    $propName: "--v#{nth($screenSizes, 1)}";
  }

  // initial variable value
  #{$propName}: #{nth($propValues, 1)}px;

  // generating media queries
  @for $i from 1 through length($screenSizes) {
    /**
		 * currentBreakpoint - current breakpoint
		 * $currentVariableValue - variable value for current breakpoint
		 */
    $currentBreakpoint: nth($screenSizes, $i);
    $currentPropValue: nth($propValues, $i);

    // in case if current key:value pair is not last in map list
    @if ($i != $breakpointsLength) {
      $nextBreakpoint: nth($screenSizes, $i + 1);
      $nextPropValue: nth($propValues, $i + 1);

      @media (max-width: #{$currentBreakpoint}px) {
        #{$propName}:
          csslock(
            $propValuesFrom: ($currentPropValue),
            $propValuesTo: ($nextPropValue),
            $sizeFrom: $currentBreakpoint,
            $sizeTo: $nextBreakpoint
          );
      }
    } @else {
      // in case if current key:value pair is last in map list
      // and if last breakpoint is not equal to 320px
      @if ($currentBreakpoint != 320) {
        @media (max-width: #{$currentBreakpoint}px) {
          #{$propName}: #{$currentPropValue}px;
        }
      }
    }
  }
}
